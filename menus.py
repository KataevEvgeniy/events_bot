import random
import string

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

import database
import messages


#-----------------------------------------------------------------------------------------------------------------------
# MAIN MENU
#-----------------------------------------------------------------------------------------------------------------------

def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton('‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–¥–∂–µ', callback_data='main_menu_info')],
        [InlineKeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data='main_menu_schedule')],
        [InlineKeyboardButton('üåê –ú–∞–≥–∞–∑–∏–Ω', callback_data='main_menu_store')],
        [InlineKeyboardButton('üß© –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—ã', callback_data='main_menu_interactive')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    database.add_user(telegram_id)
    user = database.get_user(telegram_id)

    max_stars_display = 15
    filled_stars = "‚≠ê" * min(user.count_stars, max_stars_display)
    empty_stars = "‚òÜ" * (max_stars_display - min(user.count_stars, max_stars_display))

    message_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ *–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π* –Ω–∞—à–µ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞!\n\n"
        f"üåü *–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:*\n"
        f"{filled_stars}{empty_stars}  ({user.count_stars} –∑–≤—ë–∑–¥)\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )

    if context.args:
        param = context.args[0]
        if param.startswith("qr_"):
            await messages.about_college(update,context)
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif update.message:
        await update.message.reply_text(message_text,reply_markup=main_menu_keyboard())
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ –∫–Ω–æ–ø–∫–∏
    elif update.callback_query:
        query = update.callback_query

        await query.edit_message_text(message_text,reply_markup=main_menu_keyboard())




async def main_menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    data = query.data

    if data == 'main_menu_info':
        await messages.main_menu_info(query)
    elif data == 'main_menu_schedule':
        await messages.main_menu_schedule(query)
    elif data == 'main_menu_store':
        await store_menu(update,context)
    elif data == 'main_menu_interactive':
        await possibilities_menu(update,context)

#-----------------------------------------------------------------------------------------------------------------------
# POSSIBILITIES MENU
#-----------------------------------------------------------------------------------------------------------------------

def possibilities_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton('üéØ –ö–≤–∏–∑ "–¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"', callback_data='start_quiz')],
        [InlineKeyboardButton('üìö –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫–æ–ª–ª–µ–¥–∂–µ', callback_data='possibilities_college_quiz')],
        [InlineKeyboardButton('üîì –û—Ç–∫—Ä–æ–π —Å–µ–∫—Ä–µ—Ç—ã –∫–æ–ª–ª–µ–¥–∂–∞', callback_data='possibilities_secrets')],
        [InlineKeyboardButton('üì∏ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥—ã –∏ –ø–æ–ª—É—á–∏ –ø—Ä–∏–∑', callback_data='possibilities_qr_quest')],
        [InlineKeyboardButton('üé∞ –†—É–ª–µ—Ç–∫–∞ –Ω–∞ –ø—Ä–∏–∑—ã', callback_data='possibilities_roulette')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def possibilities_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.message:
        await update.message.reply_text("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤:",reply_markup=modular_keyboard([possibilities_menu_keyboard(),back_keyboard("main_menu")]))
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ –∫–Ω–æ–ø–∫–∏
    elif update.callback_query:
        query = update.callback_query

        await query.edit_message_text("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤:",reply_markup=modular_keyboard([possibilities_menu_keyboard(),back_keyboard("main_menu")]))

async def possibilities_menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    data = query.data


    if data == 'possibilities_college_quiz':
        await query.edit_message_text("üìö –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫–æ–ª–ª–µ–¥–∂–µ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è!")
    elif data == 'possibilities_secrets':
        await query.edit_message_text("üîì –°–µ–∫—Ä–µ—Ç –∫–æ–ª–ª–µ–¥–∂–∞: –Ω–∞—à–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–±–µ–∂–¥–∞—é—Ç –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö –∫–∞–∂–¥—ã–π –≥–æ–¥!")
    elif data == 'possibilities_qr_quest':
        await query.edit_message_text("üì∏ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –≤—Å–µ QR-–∫–æ–¥—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫!")
    elif data == 'possibilities_roulette':
        await query.edit_message_text("üé∞ –ó–∞–ø—É—Å—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ –≤—ã–∏–≥—Ä–∞–π –ø—Ä–∏–∑—ã! –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")


#-----------------------------------------------------------------------------------------------------------------------
# STORE MENU
#-----------------------------------------------------------------------------------------------------------------------

def store_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton('üéì –ó–Ω–∞—á–æ–∫ –∫–æ–ª–ª–µ–¥–∂–∞ ‚Äî 2‚≠ê', callback_data='store_pin')],
        [InlineKeyboardButton('üñäÔ∏è –§–∏—Ä–º–µ–Ω–Ω–∞—è —Ä—É—á–∫–∞ ‚Äî 3‚≠ê', callback_data='store_pen')],
        [InlineKeyboardButton('üß¢ –ë–µ–π—Å–±–æ–ª–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º ‚Äî 5‚≠ê', callback_data='store_cap')],
        [InlineKeyboardButton('üéí –†—é–∫–∑–∞–∫ –ï–≠–¢–ö ‚Äî 8‚≠ê', callback_data='store_backpack')],
        [InlineKeyboardButton('üéÅ –°—é—Ä–ø—Ä–∏–∑-–±–æ–∫—Å ‚Äî 10‚≠ê', callback_data='store_box')],
    ]
    return InlineKeyboardMarkup(keyboard)


async def store_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "üõç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∫–æ–ª–ª–µ–¥–∂–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:",
            reply_markup=modular_keyboard([store_menu_keyboard(),back_keyboard("main_menu")])
        )
    elif update.callback_query:
        query = update.callback_query
        await query.edit_message_text(
            "üõç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∫–æ–ª–ª–µ–¥–∂–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:",
            reply_markup=modular_keyboard([store_menu_keyboard(),back_keyboard("main_menu")])
        )

async def store_menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    telegram_id = query.from_user.id
    user = database.get_user(telegram_id)

    store_items = {
        "store_pin":  {"name": "–ó–Ω–∞—á–æ–∫ –∫–æ–ª–ª–µ–¥–∂–∞", "cost": 2},
        "store_pen":  {"name": "–§–∏—Ä–º–µ–Ω–Ω–∞—è —Ä—É—á–∫–∞", "cost": 3},
        "store_cap":  {"name": "–ë–µ–π—Å–±–æ–ª–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º", "cost": 5},
        "store_backpack": {"name": "–†—é–∫–∑–∞–∫ –ï–≠–¢–ö", "cost": 8},
        "store_box": {"name": "–°—é—Ä–ø—Ä–∏–∑-–±–æ–∫—Å", "cost": 10},
    }

    item = store_items.get(query.data)

    if item:
        if user.count_stars >= item["cost"]:
            redeem_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))

            new_balance = user.count_stars - item["cost"]

            await query.edit_message_text(
                f"üéü *–í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:* `{redeem_code}`\n"
                f"üìå –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø—Ä–æ–¥–∞–≤—Ü—É.\n\n",
                parse_mode="Markdown",
                reply_markup=back_keyboard("main_menu")
            )
        else:
            await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ üòï", show_alert=True)


#-----------------------------------------------------------------------------------------------------------------------
# ADMIN MENU
#-----------------------------------------------------------------------------------------------------------------------

def admin_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å QR –∫–æ–¥', callback_data='admin_qr')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",reply_markup=admin_menu_keyboard())

async def admin_menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    data = query.data

    if data == 'admin_qr':
        await messages.qr_article_links(query)

#-----------------------------------------------------------------------------------------------------------------------
# MODULAR KEYBOARD
#-----------------------------------------------------------------------------------------------------------------------

def modular_keyboard(keyboards: list[InlineKeyboardMarkup]):
    modular_keyboards = []

    for keyboard in keyboards:
        modular_keyboards += keyboard.inline_keyboard

    return InlineKeyboardMarkup(modular_keyboards)



#-----------------------------------------------------------------------------------------------------------------------
# BACK KEYBOARD
#-----------------------------------------------------------------------------------------------------------------------


def back_keyboard(param: str):
    keyboard = []

    if param == "main_menu":
        keyboard.append([InlineKeyboardButton('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back_to_main_menu')])
    elif param == "possibilities_menu":
        keyboard.append([InlineKeyboardButton('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back_to_possibilities_menu')])

    return InlineKeyboardMarkup(keyboard)

async def back_keyboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    data = query.data

    if data == 'back_to_possibilities_menu':
        await possibilities_menu(update,context)
    elif data == 'back_to_main_menu':
        await main_menu(update,context)

